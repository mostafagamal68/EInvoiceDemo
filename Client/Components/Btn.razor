@inject IJSRuntime JS
@inject IModalService ModalService

@if (IsSubBtn)
{
    @Button
}
else
{
    <span class="btn-group">
        @Button
        @if (ChildContent is not null)
        {
            <a role="button" class="btn shadow-sm dropdown-toggle dropdown-toggle-split @Classes" data-bs-toggle="dropdown" aria-expanded="false">
                <span class="visually-hidden">Toggle Dropdown</span>
            </a>
            <ul class="dropdown-menu">
                @ChildContent
            </ul>
        }
    </span>
}
@if (EditContext is not null && ValidateModel)
{
    <NavigationLock OnBeforeInternalNavigation="CheckForModification" />
}
@code {
    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public bool IsActionRun { get; set; }

    [Parameter]
    public SpinnerType SpinnerType { get; set; } = SpinnerType.Grow;

    [Parameter]
    public EventCallback ClickAction { get; set; }

    [Parameter]
    public string? Icon { get; set; }

    [Parameter]
    public bool ValidateModel { get; set; }

    [Parameter]
    public bool IsSubBtn { get; set; }

    [Parameter]
    public bool CloseAfterSave { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? OtherAttributes { get; set; }

    [CascadingParameter]
    EditContext? EditContext { get; set; }

    [CascadingParameter]
    public ModalData Modal { get; set; }

    private Dictionary<string, object>? AdditionalAttributes { get; set; }
    private bool IsSaved { get; set; }
    private string? Classes { get; set; }
    private ElementReference Element;
    RenderFragment Button =>
    @<a @ref="Element" class="@(IsSubBtn ? "dropdown-item" : "btn shadow-sm") @Classes" @onclick="@RunAction" disabled="@IsActionRun" role="button" @attributes="AdditionalAttributes">
        @if (IsActionRun)
    {
    switch (SpinnerType)
    {
    case SpinnerType.Grow:
        <span class="spinner-grow spinner-grow-sm mx-1" role="status"></span>
    break;
    case SpinnerType.Border:
        <span class="spinner-border spinner-border-sm mx-1" role="status"></span>
    break;
    }
    }
    else
    {
    if (Text.HasValue())
    {
        <span class="mx-1">@Text</span>
    }
    if (Icon.HasValue())
    {
        <i class="@Icon mx-1"></i>
    }
    }
    </a>
    ;

    protected override void OnInitialized()
    {
        Classes = OtherAttributes?.GetValueOrDefault("class")?.ToString();
        OtherAttributes?.Remove("class");
        AdditionalAttributes = OtherAttributes;
    }

    async Task CheckForModification(LocationChangingContext context)
    {
        if (!IsSaved && EditContext?.IsModified() == true)
        {
            var confirm = ModalService.Show(
                typeof(ConfirmDialog),
                "There are unsaved changes!",
                new Dictionary<string, object>
                { 
                    { nameof(ConfirmDialog.Text), "Do you want to leave?" }
                },
                null);

            await confirm.Closing;

            if (confirm.Value.CastTo<bool?>() is not true)
                context.PreventNavigation();
        }
    }

    async Task RunAction()
    {
        IsActionRun = true;
        try
        {
            if (EditContext is not null)
            {
                if (!ValidateModel || EditContext.Validate())
                {
                    await ClickAction.InvokeAsync();
                    IsSaved = true;
                    if (CloseAfterSave)
                    {
                        if (Modal is not null)
                            ModalService.Close(Modal);
                        else
                            await JS.InvokeVoidAsync("history.back");
                    }
                }
            }
            else
                await ClickAction.InvokeAsync();
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
        finally
        {
            IsActionRun = false;
        }

    }
}