@inject IJSRuntime JS
<span>
    <a @ref="Element" class="btn rounded-3 shadow-sm @classes" @onclick="@RunAction" disabled="@IsActionRun" role="button" @attributes="AdditionalAttributes">
        @if (IsActionRun)
        {
            switch (SpinnerType)
            {
                case SpinnerType.Grow:
                    <span class="spinner-grow spinner-grow-sm mx-1" role="status"></span>
                    break;
                case SpinnerType.Border:
                    <span class="spinner-border spinner-border-sm mx-1" role="status"></span>
                    break;
            }
        }
        else
        {
            if (Text.HasValue())
            {
                <label class="mx-1">@Text</label>
            }
            if (Icon.HasValue())
            {
                <i class="@Icon mx-1"></i>
            }
        }
    </a>
</span>
@if (EditContext is not null && ValidateModel)
{
    <NavigationLock OnBeforeInternalNavigation="CheckForModification" />
}
@code {
    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public bool IsActionRun { get; set; }

    [Parameter]
    public SpinnerType SpinnerType { get; set; } = SpinnerType.Grow;

    [Parameter]
    public EventCallback ClickAction { get; set; }

    [Parameter]
    public string? Icon { get; set; }

    [Parameter]
    public bool ValidateModel { get; set; } = false;

    [Parameter]
    public bool CloseAfterSave { get; set; } = false;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? OtherAttributes { get; set; }

    [CascadingParameter]
    EditContext? EditContext { get; set; }

    // [CascadingParameter]
    // IModalService Modal { get; set; } = default!;

    // [CascadingParameter]
    // BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [CascadingParameter]
    public IMgModal ModalService { get; set; }

    [CascadingParameter]
    public ModalObject ModalObject { get; set; }

    private Dictionary<string, object>? AdditionalAttributes { get; set; }
    private string? classes { get; set; }
    private ElementReference Element;

    protected override void OnInitialized()
    {
        classes = OtherAttributes?.GetValueOrDefault("class")?.ToString();
        OtherAttributes?.Remove("class");
        AdditionalAttributes = OtherAttributes;
    }

    private async Task CheckForModification(LocationChangingContext context)
    {
        if (EditContext?.IsModified() == true)
        {
            var confirm = ModalService.Show(
                typeof(ConfirmDialog),
                "There are unsaved changes!", 
                new ModalParameters().Add(nameof(ConfirmDialog.Text), "Do you want to leave?")
            );

            await confirm.Closing;

            if (confirm.Value.CastTo<bool?>() == true) 
                context.PreventNavigation();
        }
    }
    private async Task RunAction()
    {
        if (EditContext == null || !ValidateModel || EditContext.Validate())
        {
            IsActionRun = true;
            try
            {
                await ClickAction.InvokeAsync();
                if (CloseAfterSave)
                {
                    if (ModalObject is not null)
                        ModalService.Close(ModalObject);
                    else
                        await JS.InvokeVoidAsync("history.back");
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            finally
            {
                IsActionRun = false;
            }

        }
    }
}