@inject IJSRuntime JS
<span>
    <a @ref="Element" class="btn rounded-3 shadow-sm @classes" @onclick="@RunAction" disabled="@IsActionRun" role="button" @attributes="AdditionalAttributes">
        @SpanIcon
        @Text
        @if (IsActionRun)
        {
            <span class="spinner-grow spinner-grow-sm mx-1" role="status"></span>
        }
    </a>
</span>
@if (EditContext is not null && ValidateModel)
{
    <NavigationLock OnBeforeInternalNavigation="CheckForModification" />
}
@code {
    [Parameter]
    public string Text { get; set; } = "";

    [Parameter]
    public EventCallback ClickAction { get; set; }

    [Parameter]
    public RenderFragment? SpanIcon { get; set; }

    [Parameter]
    public bool ValidateModel { get; set; } = false;

    [Parameter]
    public bool CloseAfterSave { get; set; } = false;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? OtherAttributes { get; set; }

    [CascadingParameter]
    public EditContext? EditContext { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private Dictionary<string, object>? AdditionalAttributes { get; set; }
    private string? classes { get; set; }
    private bool IsActionRun = false;
    private ElementReference Element;

    protected override void OnParametersSet()
    {
        classes = OtherAttributes?.GetValueOrDefault("class")?.ToString();
        OtherAttributes?.Remove("class");
        AdditionalAttributes = OtherAttributes;
        base.OnParametersSet();
    }

    private async Task CheckForModification(LocationChangingContext context)
    {
        if (EditContext.IsModified())
        {
            var confirm = await JS.InvokeAsync<bool>("window.confirm", "There are unsaved changes!, Do you want to leave?");
            if (!confirm) context.PreventNavigation();
        }
    }
    private async Task RunAction()
    {
        if (EditContext == null || !ValidateModel || EditContext.Validate())
        {
            IsActionRun = true;
            try
            {
                await ClickAction.InvokeAsync();
                if (CloseAfterSave)
                {
                    if (BlazoredModal is not null)
                        await BlazoredModal.CloseAsync();
                    else
                        await JS.InvokeVoidAsync("history.back");
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            finally
            {
                IsActionRun = false;
            }

        }
    }
}