<div class="dropdown">
    @if (AutoComplete)
    {
        <input class="form-control" type="text" placeholder="Auto Complete" data-bs-toggle="dropdown" aria-expanded="false" style="min-width:200px"
        @bind-value="Value" @bind-value:event="oninput" @bind-value:after="GetFilteredList" @onclick="GetAll" />
    }
    else
    {
        <a class="form-select text-decoration-none" role="button" data-bs-toggle="dropdown" aria-expanded="false" style="min-width:180px">
            @(Value ?? "Not Selected")
        </a>
    }

    <ul class="dropdown-menu">
        @if (List is null)
        {
            <li><h6 class="dropdown-item my-0">No result</h6></li>
        }
        else
        {
            if (!AutoComplete)
            {
                <li><a class="dropdown-item my-0" role="button" @onclick="SelectedValueChanged">Clear</a></li>
                <li><hr class="dropdown-divider"></li>
            }
            foreach (KeyValue item in List)
            {
                <li>
                    <a class="dropdown-item my-0" role="button" @onclick="@(async () => await SelectedValueChanged(item))">
                        @item?.Value
                    </a>
                </li>
            }
        }
    </ul>
</div>

@code {
    [Parameter] public List<KeyValue>? List { get; set; }

    [Parameter] public string? Value { get; set; }

    [Parameter] public bool ReGetOnClick { get; set; } = false;

    [Parameter] public bool AutoComplete { get; set; } = false;

    [Parameter] public bool Boolean { get; set; } = false;

    [Parameter] public Guid? Id { get; set; } = null;

    [Parameter] public EventCallback<KeyValue?> ValueChanged { get; set; }

    [Parameter] public EventCallback<string> GetList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!AutoComplete) await GetList.InvokeAsync();        
    }

    private async Task GetFilteredList() => await GetList.InvokeAsync(Value);

    private async Task GetAll()
    {
        await SelectedValueChanged();
        await GetList.InvokeAsync();
    }

    private async Task SelectedValueChanged()
    {
        Value = null;
        await ValueChanged.InvokeAsync();
    }

    private async Task SelectedValueChanged(KeyValue newValue)
    {
        Value = newValue.Value;
        if (Id.HasValue) newValue.Id = Id;
        await ValueChanged.InvokeAsync(newValue);
    }
}
