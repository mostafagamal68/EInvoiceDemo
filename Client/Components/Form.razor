@inherits GeneralComponent
@inject IJSRuntime JS
@typeparam TDto where TDto : DtoBase, new()
@typeparam TFilter where TFilter : GlobalFilter<TDto>
@inject IGenericService<TFilter, TDto> Service

<EditForm Model="dto">
    <DataAnnotationsValidator />
    @if (InModal)
    {
        <div class="modal-body">
            @if (!LoaderService.IsLoading)
            {
                @Content?.Invoke(dto)
            }
        </div>
        <div class="modal-footer shadow">
            @formFooter
        </div>
    }
    else
    {
        <div class="card rounded shadow">
            <div class="card-body mb-3" @ref=bodyElement>
                @if (!LoaderService.IsLoading)
                {
                    @Content?.Invoke(dto)
                }
            </div>
            <div class="card-footer">
                @formFooter
            </div>
        </div>
    }
</EditForm>

@code {
    [Parameter] public string Item { get; set; }
    [Parameter] public EventCallback<TDto> OnLoadCreate { get; set; }
    [Parameter] public EventCallback<TDto> OnLoadUpdate { get; set; }
    [Parameter] public RenderFragment<TDto> Content { get; set; }
    [Parameter] public RenderFragment<TDto>? Actions { get; set; }

    TDto dto = new();
    ElementReference bodyElement;
    bool savedWithNew;
    RenderFragment formFooter =>
    @<div class="d-flex justify-content-end align-items-center gap-2">
        @Actions?.Invoke(dto)
        @if (Id.HasValue)
    {
        <Btn class="btn-info" Text="New" ClickAction="New" />
        <Btn class="btn-secondary" Text="Copy" ClickAction="Copy" />
        <Btn class="btn-danger" Text="Delete" ClickAction="Delete" />
    }
        @if (savedWithNew)
    {
        <Btn class="btn-success" Text="Save & New" ValidateModel="true" ClickAction="SaveThenNew">
            <li><Btn Text="Save" ValidateModel="true" ClickAction="HandleValidSubmit" IsSubBtn="true" /></li>
        </Btn>
    }
    else
    {
        <Btn class="btn-success" Text="Save" ValidateModel="true" ClickAction="HandleValidSubmit">
            <li><Btn Text="Save & New" ValidateModel="true" ClickAction="SaveThenNew" IsSubBtn="true" /></li>
        </Btn>
    }
    </div>
    ;

    protected override async Task OnInitializedAsync() => await GetData();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!InModal)
                await JS.InvokeVoidAsync("focusFirstInput", bodyElement);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetData()
    {

        if (!InModal)
            HeaderService.ChangeHeaderAndTitle($"{(Id.HasValue ? "Edit" : "Add")} {Item}");

        LoaderService.ToggleLoader();

        if (Id.HasValue)
        {
            dto = await Service.GetSingle(Id);
            if (OnLoadUpdate.HasDelegate)
                await OnLoadUpdate.InvokeAsync(dto);
        }
        else
        {
            dto.Id = Guid.NewGuid();
            if (OnLoadCreate.HasDelegate)
                await OnLoadCreate.InvokeAsync(dto);
            dto.CastTo<dynamic>().Code = await Service.GetCode();
        }

        LoaderService.ToggleLoader();
    }

    private async Task<bool> HandleValidSubmit()
    {
        var successeded = await SendRequest();
        if (successeded) Id = dto.Id;
        return successeded;
    }

    private async Task<bool> SendRequest()
    {
        HttpResponseMessage response = Id switch
        {
            null => await Service.Create(dto),
            _ => await Service.Edit(dto)
        };

        await ShowResultMessage(response);
        return response.IsSuccessStatusCode;
    }

    private async Task New()
    {
        Id = null;
        dto = new TDto();
        await GetData();
    }

    private async Task SaveThenNew()
    {
        if (await HandleValidSubmit())
        {
            await New();
            savedWithNew = true;
        }
    }

    private async Task Copy()
    {
        Id = null;
        await GetData();
    }

    private async Task Delete()
    {
        if (await ShowDeleteConfirmation(Item))
        {
            var response = await Service.Delete(Id);
            if (response.IsSuccessStatusCode)
                GoTo(Item + "s");
            await ShowResultMessage(response);
        }
    }
}
