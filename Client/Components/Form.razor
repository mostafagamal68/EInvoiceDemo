@inherits GeneralComponent
@typeparam TDto where TDto : DtoBase, new()
@typeparam TFilter where TFilter : GlobalFilter<TDto>
@inject IGenericService<TFilter, TDto> service
@inject IJSRuntime JS

<EditForm Model="Dto">
    <DataAnnotationsValidator />
    @if (InModal)
    {
        <div class="modal-body" @ref=bodyElement>
            @if (!LoaderService.IsLoading)
            {
                @ChildContent?.Invoke(Dto)
            }
        </div>
        <div class="modal-footer shadow">
            @formFooter
        </div>
    }
    else
    {
        <div class="card rounded shadow">
            <div class="card-body mb-3" @ref=bodyElement>
                @if (!LoaderService.IsLoading)
                {
                    @ChildContent?.Invoke(Dto)
                }
            </div>
            <div class="card-footer">
                @formFooter
            </div>
        </div>
    }
</EditForm>

@code {
    public TDto Dto { get; set; } = new();
    public IGenericService<TFilter, TDto> Service => service;

    [Parameter] public Guid? Id { get; set; }
    [Parameter] public EventCallback<Form<TDto, TFilter>> OnLoadCreate { get; set; }
    [Parameter] public EventCallback<Form<TDto, TFilter>> OnLoadUpdate { get; set; }
    [Parameter] public RenderFragment<TDto> ChildContent { get; set; }
    [Parameter] public RenderFragment<TDto>? Actions { get; set; }

    string item;
    bool savedWithNew;
    ElementReference bodyElement;
    RenderFragment formFooter =>
    @<div class="d-flex justify-content-end align-items-center gap-2">
    @Actions?.Invoke(Dto)
    @if (Id.HasValue)
    {
        <Btn class="btn-info" Text="New" ClickAction="New" />
        <Btn class="btn-secondary" Text="Copy" ClickAction="Copy" />
        <Btn class="btn-danger" Text="Delete" ClickAction="Delete" />
    }
        @if (savedWithNew)
    {
        <Btn class="btn-success" Text="Save & New" ValidateModel=true ClickAction=SaveThenNew>
            <li><Btn Text="Save" ValidateModel=true ClickAction=HandleValidSubmit IsSubBtn=true CloseAfterSave=InModal /></li>
        </Btn>
    }
    else
    {
        <Btn class="btn-success" Text="Save" ValidateModel=true ClickAction=HandleValidSubmit CloseAfterSave=InModal>
            <li><Btn Text="Save & New" ValidateModel=true ClickAction=SaveThenNew IsSubBtn=true /></li>
        </Btn>
    }
    </div>
    ;

    protected override async Task OnInitializedAsync()
    { 
        item = typeof(TDto).Name.Replace("Dto", "");
        await GetData(); 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("focusFirstInput", bodyElement);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetData()
    {
        if (!InModal)
            HeaderService.ChangeHeaderAndTitle($"{(Id.HasValue ? "Edit" : "Add")} {item}");

        LoaderService.ToggleLoader();

        if (Id.HasValue)
        {
            Dto = await service.GetSingle(Id);
            if (OnLoadUpdate.HasDelegate)
                await OnLoadUpdate.InvokeAsync(this);
        }
        else
        {
            Dto.Id = Guid.NewGuid();
            if (OnLoadCreate.HasDelegate)
                await OnLoadCreate.InvokeAsync(this);
        }

        LoaderService.ToggleLoader();
    }

    private async Task<bool> HandleValidSubmit()
    {
        var successeded = await SendRequest();
        if (successeded) Id = Dto.Id;
        return successeded;
    }

    private async Task<bool> SendRequest()
    {
        HttpResponseMessage response = Id switch
        {
            null => await service.Create(Dto),
            _ => await service.Edit(Dto)
        };

        await ShowResultMessage(response);
        return response.IsSuccessStatusCode;
    }

    private async Task New()
    {
        Id = null;
        Dto = new TDto();
        await GetData();
    }

    private async Task SaveThenNew()
    {
        if (await HandleValidSubmit())
        {
            await New();
            savedWithNew = true;
        }
    }

    private async Task Copy()
    {
        Id = null;
        await GetData();
    }

    private async Task Delete()
    {
        if (await ShowDeleteConfirmation(item))
        {
            var response = await service.Delete(Id);
            if (response.IsSuccessStatusCode)
                GoTo(service.Api);
            await ShowResultMessage(response);
        }
    }
}
