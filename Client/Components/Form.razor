@inherits GeneralComponent
@inject IJSRuntime JS
@typeparam TDto where TDto : DtoBase, new()
@typeparam TFilter where TFilter : GlobalFilter<TDto>
@inject IGenericService<TFilter, TDto> Service

<EditForm Model="dto">
    <DataAnnotationsValidator />
    @if (AsModal)
    {
        <div class="modal-body">
            @if (LoaderService.IsLoading)
            {
                <div class="row my-1 placeholder-glow">
                    <div class="col-lg-2 col-md-3 my-auto">
                        <label class="placeholder">0000000000</label>
                    </div>
                    <div class="col-lg-7 col-md-9">
                        <input class="placeholder form-control" type="text" />
                    </div>
                </div>
                <div class="row my-1 placeholder-glow">
                    <div class="col-lg-2 col-md-3 my-auto">
                        <label class="placeholder">0000000000</label>
                    </div>
                    <div class="col-lg-7 col-md-9">
                        <input class="placeholder form-control" type="text" />
                    </div>
                </div>
            }
            else
            {
                @Content.Invoke(dto)
            }
        </div>
        <div class="modal-footer shadow">
            @formFooter
        </div>
    }
    else
    {
        <div class="card rounded shadow">
            <div class="card-body mb-3" @ref=bodyElement>
                @if (LoaderService.IsLoading)
                {
                    <div class="row my-1 placeholder-glow">
                        <div class="col-lg-2 col-md-3 my-auto">
                            <label class="placeholder">0000000000</label>
                        </div>
                        <div class="col-lg-7 col-md-9">
                            <input class="placeholder form-control" type="text" />
                        </div>
                    </div>
                    <div class="row my-1 placeholder-glow">
                        <div class="col-lg-2 col-md-3 my-auto">
                            <label class="placeholder">0000000000</label>
                        </div>
                        <div class="col-lg-7 col-md-9">
                            <input class="placeholder form-control" type="text" />
                        </div>
                    </div>
                }
                else
                {
                    @Content.Invoke(dto)
                }
            </div>
            <div class="card-footer">
                @formFooter
            </div>
        </div>
    }
</EditForm>

@code {
    [Parameter] public string Item { get; set; }
    [Parameter] public RenderFragment<TDto> Content { get; set; }
    [Parameter] public RenderFragment<TDto>? Actions { get; set; }

    TDto dto = new();
    ElementReference bodyElement;
    bool SavedWithNew = false;
    RenderFragment formFooter =>
    @<div class="d-flex justify-content-end align-items-center gap-2">
        @Actions?.Invoke(dto)
        @if (Id.HasValue)
    {
        <Btn class="btn-info" Text="New" ClickAction="New" />
        <Btn class="btn-secondary" Text="Copy" ClickAction="Copy" />
        <Btn class="btn-danger" Text="Delete" ClickAction="Delete" />
    }
        @if (SavedWithNew)
    {
        <Btn class="btn-success" Text="Save & New" ValidateModel="true" CloseAfterSave="false" ClickAction="SaveThenNew">

            <li><Btn Text="Save" ValidateModel="true" ClickAction="HandleValidSubmit" IsSubBtn="true" /></li>
        </Btn>
    }
    else
    {
        <Btn class="btn-success" Text="Save" ValidateModel="true" ClickAction="HandleValidSubmit">
            <li><Btn Text="Save & New" ValidateModel="true" CloseAfterSave="false" ClickAction="SaveThenNew" IsSubBtn="true" /></li>
        </Btn>
    }
    </div>
    ;

    protected override async Task OnInitializedAsync() => await GetData();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!AsModal)
                await JS.InvokeVoidAsync("focusFirstInput", bodyElement);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task GetData()
    {
        if (!AsModal)
            HeaderService.ChangeHeaderAndTitle($"{(Id.HasValue ? "Edit" : "Add")} {Item}");

        LoaderService.ToggleLoader();

        if (Id.HasValue)
            dto = await Service.GetSingle(Id);
        else
        {
            dto.Id = Guid.NewGuid();
            dto.CastTo<dynamic>().Code = await Service.GetCode();
        }

        LoaderService.ToggleLoader();
    }
    private async Task HandleValidSubmit()
    {
        HttpResponseMessage httpResponseMessage;
        if (!Id.HasValue)
        {
            httpResponseMessage = await Service.Create(dto);
            if (httpResponseMessage.IsSuccessStatusCode)
                Id = dto.Id;
        }
        else
            httpResponseMessage = await Service.Edit(dto);
        await ShowResultMessage(httpResponseMessage);
    }
    private async Task New()
    {
        Id = null;
        dto = new TDto();
        await GetData();
    }
    private async Task SaveThenNew()
    {
        await HandleValidSubmit();
        await New();
        SavedWithNew = true;
    }
    private async Task Copy()
    {
        Id = null;
        await GetData();
    }
    private async Task Delete()
    {
        if (await ShowDeleteConfirmation(Item))
        {
            var response = await Service.Delete(Id);
            if (response.IsSuccessStatusCode)
                GoTo(Item + "s");
            await ShowResultMessage(response);
        }
    }
}
