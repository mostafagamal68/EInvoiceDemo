@inject IModalService ModalService
@inject NavigationManager Navigation
@implements IDisposable
@if (modals.Count != 0)
{
    foreach (var (modal, index) in modals.Select((c, i) => (c, i)))
    {
        <CascadingValue Value="modal">

            <ModalDialog Dismiss="DismissModal" />

        </CascadingValue>
    }
}

@code {
    List<ModalData> modals = new();
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ModalService.OnModalOpened += AddModal;
            ModalService.OnModalClosed += RemoveModal;
            Navigation.LocationChanged += CloseModals;
        }
        base.OnAfterRender(firstRender);
    }
    void CloseModals(object? sender, LocationChangedEventArgs args)
    {
        if (modals.Count != 0)
        {
            modals.RemoveRange(0, modals.Count);
            StateHasChanged();
        }
    }
    async Task AddModal(ModalData modal)
    {
        modal.IsConfirm = modal.ComponentType == typeof(ConfirmDialog);
        modal.AnimationClass = modal.IsConfirm ? "popIn" : "fadeInDown";
        modals.Add(modal);
        await InvokeAsync(StateHasChanged);
    }
    async Task RemoveModal(ModalData modal)
    {
        modal.EndAwait();
        modal.AnimationClass = modal.IsConfirm ? "popOut" : "fadeOutUp";
        await Task.Delay(200);
        modals.Remove(modal);
        await InvokeAsync(StateHasChanged);
    }
    async Task DismissModal(ModalData modal)
    {
        if (modal.OnDismiss is not null)
            await modal.OnDismiss();
        await RemoveModal(modal);
    }    
    public void Dispose()
    {
        ModalService.OnModalOpened -= AddModal;
        ModalService.OnModalClosed -= RemoveModal;
        Navigation.LocationChanged -= CloseModals;
    }
}
