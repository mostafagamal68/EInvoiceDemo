@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@inherits InputBase<T?>
@typeparam T where T : struct, Enum

@if (AsRadios)
{
    <div class="rounded p-1 @CssClass">
        @if (ShowChoose)
        {
            <div class="form-check form-check-inline">
                <label class="form-check-label">
                    <input class="form-check-input" type="radio" name="@DisplayName"
                           value="" checked="@(!Value.HasValue)" @onchange="ValueHasChanged" />
                    None
                </label>
            </div>
        }
        @foreach (var item in Enum.GetValues<T>())
        {
            <div class="form-check form-check-inline">
                <label class="form-check-label">
                    <input class="form-check-input" type="radio" name="@DisplayName"
                           value="@item" checked="@(Value.Equals(item))" @onchange="ValueHasChanged" />
                    @Enum.GetName(typeof(T), item)
                </label>
            </div>
        }
    </div>
}
else
{
    <select class="form-select @CssClass" value="@Value" name="@DisplayName" @onchange="ValueHasChanged">
        @if (ShowChoose)
        {
            <option value="">Select</option>
        }
        @foreach (var item in Enum.GetValues<T>())
        {
            <option value="@item">@Enum.GetName(typeof(T), item)</option>
        }
    </select>
}
@code {
    [Parameter]
    public bool AsRadios { get; set; }

    [Parameter]
    public bool ShowChoose { get; set; }

    void ValueHasChanged(ChangeEventArgs args)
    {
        string? value = args.Value?.CastTo<string>();
        CurrentValue = value.HasValue() ? Enum.Parse<T>(value!) : null;
    }
    protected override bool TryParseValueFromString(string? value, out T? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (value is not null)
        {
            if (Enum.TryParse<T>(value, true, out T parsedValue))
            {
                result = parsedValue;
            }
            else
            {
                result = null;
                validationErrorMessage = string.Format(CultureInfo.InvariantCulture, "Cannot asign value", DisplayName ?? FieldIdentifier.FieldName);
                return false;
            }
        }
        else
        {
            result = null;
        }
        validationErrorMessage = null;
        return true;
    }
}
