@using System.Linq.Expressions;
@typeparam TDto where TDto : DtoBase
@typeparam TFilter where TFilter : GlobalFilter<TDto>
@inherits InputText
@inject IGenericService<TFilter, TDto> Service
<div class="dropdown">
    @if (AutoComplete)
    {
        <input class="form-select @CssClass" placeholder="Auto Complete" autocomplete="off"
               data-bs-toggle="dropdown" aria-expanded="false" value="@CurrentValueAsString"
               @attributes="AdditionalAttributes" @oninput="Search" @onclick="GetAll" />
    }
    else
    {
        <input class="form-select @CssClass" style="cursor:pointer;" data-bs-toggle="dropdown" aria-expanded="false"
               value="@(CurrentValue ?? "Not Selected")" @attributes="AdditionalAttributes" readonly />
    }

    <ul class="dropdown-menu w-100">
        @if (!List.Any())
        {
            <li><h6 class="dropdown-item py-0">No result</h6></li>
        }
        else
        {
            if (!AutoComplete)
            {
                <li>
                    <a class="dropdown-item py-0" role="button" @onclick="SelectedValueChanged">
                        <div class="d-flex justify-content-between">
                            <span class="text-start">Clear</span>
                            <span class="text-end"><i class="bi bi-x-circle"></i></span>
                        </div>
                    </a>
                </li>
                <li><hr class="dropdown-divider"></li>
            }
            foreach (var item in List)
            {
                <li>
                    <a class="dropdown-item" role="button" @onclick="async () => await SelectedValueChanged(item)">
                        @item?.Value
                    </a>
                </li>
            }
        }
    </ul>
</div>

@code {
    List<KeyValue>? List { get; set; } = new();

    [Parameter] public bool AutoComplete { get; set; } = false;

    [Parameter] public bool Boolean { get; set; } = false;

    [Parameter] public Guid? Key { get; set; }

    [Parameter] public EventCallback<Guid?> KeyChanged { get; set; }

    [Parameter] public Expression<Func<Guid?>>? KeyExpression { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!AutoComplete) List = await Service.GetKeyValue(null);
    }

    private async Task GetAll()
    {
        List = await Service.GetKeyValue(null);
        await SelectedValueChanged();
    }

    private async Task Search(ChangeEventArgs args)
        => await Service.GetKeyValue(args?.Value?.ToString());

    private async Task SelectedValueChanged(KeyValue? newValue)
    {
        await KeyChanged.InvokeAsync(newValue?.Key);
        await ValueChanged.InvokeAsync(newValue?.Value);
        if (newValue?.Value is not null)
            EditContext?.NotifyFieldChanged(FieldIdentifier);
    }
        
    private async Task SelectedValueChanged()
        => await SelectedValueChanged(null);
}
