@page "/Customers"
@inherits GeneralComponent
@inject ICustomersService service

<div class="d-flex justify-content-end align-items-center mb-3">
    <a role="button" class="btn btn-violet rounded-3" @onclick="@(()=>ShowModal(typeof(Customer), "Add - Customer", afterClose: GetCustomersFiltered))">
        <i class="bi bi-plus-circle mx-1"></i>
        Add
    </a>
</div>
<div class="d-flex justify-content-start mb-3">
    <div>
        <label>Name</label>
        <input class="form-control" @bind="CustomersFilter.CustomerName" @bind:event="oninput" @bind:after="GetCustomersFiltered" />
    </div>
</div>
@if (!LoaderService.IsLoading)
{
    <TableWithPagination TType="CustomerDto" Model="CustomersFilter" Filter="GetCustomersFiltered"
                         Actions="@((args) => TableActions(args.Id, args.IsDelete))">
    </TableWithPagination>
}
@code {
    CustomersFilter CustomersFilter = new();
    protected override async Task OnInitializedAsync()
    {
        HeaderService.ChangeHeaderAndTitle("Customers");
        LoaderService.ToggleLoader();
        await GetCustomersFiltered();
        LoaderService.ToggleLoader();
    }
    private async Task GetCustomersFiltered() => CustomersFilter = await service.GetList(CustomersFilter);
    private async Task TableActions(Guid Id, bool IsDelete)
    {
        if (IsDelete)
        {
            if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this Customer?"))
            {
                var response = await service.Delete(Id);
                if (response.IsSuccessStatusCode)
                    CustomersFilter.Items.Remove(CustomersFilter.Items.First(c => c.CustomerId == Id));
                await ShowResultMessage(response);
            }
        }
        else
        {
            await ShowModal(typeof(Customer), "Edit - Customer", new ModalParameters().Add(nameof(Customer.IsModal), true).Add(nameof(Customer.Id), Id), GetCustomersFiltered);
        }
    }
    private async Task SortBy(string Field)
    {
        CustomersFilter.SortField = Field;
        CustomersFilter.SortApproach = !CustomersFilter.SortApproach;
        await GetCustomersFiltered();
    }

}
