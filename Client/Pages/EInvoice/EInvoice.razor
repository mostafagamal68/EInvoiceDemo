@page "/EInvoice/{Id:guid?}"
@using EInvoiceDemo.Client.Pages.Customer
@using EInvoiceDemo.Shared.DTOs.Customers
@using EInvoiceDemo.Shared.DTOs.EInvoice
@inject IModalService ModalService
@implements IForm

<Form Id="Id"
      TDto="EInvoiceDto"
      TFilter="EInvoicesFilter"
      OnLoadCreate="async form => form.Dto.Code = await form.Service.GetCode()"
      HandleCopy="form => form.Dto.EInvoiceLines.ForEach(c =>
            {
                c.Id = Guid.NewGuid();
                c.EInvoiceId = form.Dto.Id;
                c.EInvoiceLineTaxes.ForEach(x =>
                    {
                        x.Id = Guid.NewGuid();
                        x.EInvoiceLineId = c.Id;
                    });
            })">
    <Field Name="Code" For="() => context.Code">
        <InputNumber class="form-control" @bind-Value="context.Code" />
    </Field>

    <Field Name="Type" For="() => context.EInvoiceType">
        <Options T=EInvoiceTypeEnum @bind-Value=context.EInvoiceType DisplayName=@nameof(context.EInvoiceType) AsRadios=true />
    </Field>

    <Field Name="Customer" For="() => context.CustomerName">
        <Select AutoComplete="true" @bind-Value="context.CustomerName" @bind-Key="context.CustomerId"
                TDto="CustomerDto" TFilter="CustomersFilter" />
    </Field>

    <Field Name="Date" For="() => context.DateTimeIssued">
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="context.DateTimeIssued" class="form-control" />
    </Field>

    <div class="card rounded-3 my-1">
        <div class="card-body">
            <div class="col-md-3 mb-1">
                <Btn class="btn-violet" Text="Add Item" Icon="bi bi-check-circle"
                     ClickAction="@(async () => await ModalService.Show(new ModalBuilder<EInvoiceLine>("Add", () => Calculate(context))
                                    .AddParameter(c => c.List, context.EInvoiceLines)
                                    .AddParameter(c => c.Dto, new EInvoiceLineDto { EInvoiceId = context.Id })
                                    .Build()
                                ))" />
            </div>
            <Grid TForm=EInvoiceLine TDto=EInvoiceLineDto TFilter=EInvoiceLineFilter Items=context.EInvoiceLines TableDesignType=TableDesign.List
                  WithEdit=false WithDelete=false ShowSort=false WithPagination=false ShowActions=false Context=line>
                <CustomActions>
                    <Btn class="btn-sm btn-warning" Icon="bi bi-pencil-square"
                         ClickAction="@(async () => await ModalService.Show(new ModalBuilder<EInvoiceLine>("Edit", () => Calculate(context))
                                .AddParameter(c => c.List, context.EInvoiceLines)
                                .AddParameter(c => c.Dto, line.Clone())
                                .Build()
                            ))" />
                </CustomActions>
            </Grid>
        </div>
    </div>

    <Field Name="Net Amount" For="() => context.NetAmount">
        <h5>@context.NetAmount.TrimZeroes()</h5>
    </Field>
</Form>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private Task Calculate(EInvoiceDto context)
    {
        context.NetAmount = context.EInvoiceLines.Sum(c => c.ItemNetAmount) ?? 0;
        return Task.CompletedTask;
    }
}
