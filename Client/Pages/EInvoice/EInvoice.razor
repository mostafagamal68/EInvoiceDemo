@page "/EInvoice/{Id:guid?}"
@inherits GeneralComponent
@inject IEInvoicesService service
@inject ICustomersService customer
@inject IEInvoiceTypesService type

<EditForm Model="dto">
    <DataAnnotationsValidator />
    <div class="col-md-12 mb-3">
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Code</label>
            </div>
            <div class="col-md-5">
                <InputNumber class="form-control" @bind-Value="dto.EInvoiceCode" />
                <ValidationMessage For="@(() => dto.EInvoiceCode)" />
            </div>
            <div class="col-md my-auto">
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Type</label>
            </div>
            <div class="col-md-5">
                <Select @bind-Value="dto.EInvoiceTypeName" @bind-Key="dto.EInvoiceTypeId" List="typesList" GetList="GetTypes" />
                @* <ComboBox Value="@dto.EInvoiceTypeName" List="typesList" GetList="GetTypes" ValueChanged="TypeChanged"></ComboBox> *@
                @* <DropdownList Value="@dto.EInvoiceTypeName" List="typesList" GetList="GetTypes" ValueChanged="TypeChanged"></DropdownList> *@
            </div>
            <div class="col-md-3 my-auto">
                <ValidationMessage For="@(() => dto.EInvoiceTypeName)" />
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Customer</label>
            </div>
            <div class="col-md-5">
                <Select AutoComplete="true" @bind-Value="dto.CustomerName" @bind-Key="dto.CustomerId" List="customersList" GetList="GetCustomers" />
                @* <ComboBox AutoComplete="true" Value="@dto.CustomerName" List="customersList" GetList="GetCustomers" ValueChanged="CustomerChanged"></ComboBox> *@
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.CustomerName)" />
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Date</label>
            </div>
            <div class="col-md-5">
                <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="dto.DateTimeIssued" class="form-control" />
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.DateTimeIssued)" />
            </div>
        </div>
        <div class="card rounded-3 my-1">
            <div class="card-body">
                <div class="col-md-3 mb-1">
                    <Btn Classes="btn-violet" Text="Add Item" ValidateEditContext="false"
                         ClickAction="@(()=>ShowModal(typeof(EInvoiceLine), "EInvoice Line",
                        new ModalParameters().Add(nameof(EInvoiceLine.List), dto.EInvoiceLines).Add(nameof(EInvoiceLine.dto), new EInvoiceLineDto() { EInvoiceId = dto.EInvoiceId }), async () => Calculate()))">
                        <SpanIcon><i class="bi bi-check-circle me-1"></i></SpanIcon>
                    </Btn>
                </div>
                @if (dto.EInvoiceLines.Any())
                {
                    <TableTemplate Items="dto.EInvoiceLines" Context="sub" class="table table-striped table-hover">
                        <TableHeader>
                            <th scope="col" class="border-end">#</th>
                            <th scope="col" class="border-end">Item</th>
                            <th scope="col" class="border-end">Amount Sold</th>
                            <th scope="col" class="border-end">Quantity</th>
                            <th scope="col" class="border-end">Total Taxes</th>
                            <th scope="col" class="border-end">Net Amount</th>
                            <th>Actions</th>
                        </TableHeader>
                        <RowTemplate>
                            <td scope="row" class="border-end">@sub.Item2</td>
                            <td class="border-end">@sub.Item1.ItemName</td>
                            <td class="border-end">@sub.Item1.AmountSold</td>
                            <td class="border-end">@sub.Item1.Quantity</td>
                            <td class="border-end">@sub.Item1.Total</td>
                            <td class="border-end">@sub.Item1.ItemNetAmount</td>
                            <td>
                                <Btn Classes="btn-sm btn-warning" ClickAction="@(()=>ShowModal(typeof(EInvoiceLine), "EInvoice Line",
                                    new ModalParameters().Add(nameof(EInvoiceLine.List), dto.EInvoiceLines).Add(nameof(EInvoiceLine.dto), (EInvoiceLineDto)sub.Item1.Clone()), async () => Calculate()))">
                                    <SpanIcon><i class="bi bi-pencil-square"></i></SpanIcon>
                                </Btn>
                            </td>
                        </RowTemplate>
                    </TableTemplate>
                }
                else
                {
                    <h4>No Items</h4>
                }
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Net Amount</label>
            </div>
            <div class="col-md-5 my-auto">
                <h5>@dto.NetAmount</h5>
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.NetAmount)" />
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-end">
        @if (Id.HasValue)
        {
            <Btn ValidateEditContext="false" Classes="btn-info" Text="New" ClickAction="New"></Btn>
            <Btn ValidateEditContext="false" Classes="btn-danger" Text="Delete" ClickAction="Delete"></Btn>
        }
        <Btn Type="submit" Classes="btn-success" Text="Save" ClickAction="HandlValidSubmit"></Btn>
    </div>
</EditForm>
@code {
    [Parameter]
    public Guid? Id { get; set; }

    EInvoiceDto dto = new();
    List<KeyValue> customersList = new();
    List<KeyValue> typesList = new();

    protected override async Task OnInitializedAsync()
        => await GetEInvoice();

    private async Task GetEInvoice()
    {
        if (!IsModal) HeaderService.ChangeHeaderAndTitle((Id.HasValue ? "Edit" : "Add") + " E-Invoice");
        LoaderService.ToggleLoader();
        if (Id.HasValue)
            dto = await service.GetSingle(Id);
        else
        {
            dto.EInvoiceId = Guid.NewGuid();
            dto.EInvoiceCode = await service.GetCode();
        }
        LoaderService.ToggleLoader();
    }
    private async Task HandlValidSubmit()
    {
        HttpResponseMessage httpResponseMessage;
        if (!Id.HasValue)
        {
            httpResponseMessage = await service.Create(dto);
            if (httpResponseMessage.IsSuccessStatusCode)
                Id = dto.EInvoiceId;
            // GoTo("EInvoice", "EInvoice ", true, dto.EInvoiceId);
        }
        else
            httpResponseMessage = await service.Edit(dto);
        await ShowResultMessage(httpResponseMessage);

    }
    private async Task New()
    {
        Id = null;
        dto = new EInvoiceDto();
        await GetEInvoice();
    }
    private async Task Delete()
    {
        if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this E-Invoice ?"))
        {
            var response = await service.Delete(Id);
            if (response.IsSuccessStatusCode)
                GoTo("EInvoices");
            await ShowResultMessage(response);
        }
    }
    private async Task GetCustomers(string? filter)
        => customersList = await customer.GetKeyValue(filter);
    private void CustomerChanged(KeyValue? keyValue)
    {
        dto.CustomerId = keyValue?.Key;
        dto.CustomerName = keyValue?.Value;
    }
    private async Task GetTypes(string? filter)
        => typesList = await type.GetKeyValue(filter);
    private void TypeChanged(KeyValue? keyValue)
    {
        dto.EInvoiceTypeId = keyValue?.Key;
        dto.EInvoiceTypeName = keyValue?.Value;
    }
    private void Calculate()
        => dto.NetAmount = dto.EInvoiceLines.Sum(c => c.ItemNetAmount) ?? 0;
}
