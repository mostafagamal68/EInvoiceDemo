@inherits GeneralComponent
@inject IItemsService item
@inject ITaxesService tax
<EditForm Model="dto" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-12 mb-3">
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Item</label>
            </div>
            <div class="col-md-5">
                <ComboBox AutoComplete="true" Type="KeyValue" DisplayPropertyName="@("Value")" Value="@dto.ItemName" List="itemsList" GetList="GetItems" ValueChanged="ItemChanged"></ComboBox>
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.ItemName)" />
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Quantity</label>
            </div>
            <div class="col-md-5">
                <InputNumber class="form-control" @bind-Value="dto.Quantity" @bind-Value:after="Calculate" />
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.Quantity)" />
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Amount Sold</label>
            </div>
            <div class="col-md-5">
                <InputNumber class="form-control" @bind-Value="dto.AmountSold" @bind-Value:after="Calculate" />
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.AmountSold)" />
            </div>
        </div>
        <div class="card rounded-3 my-1">
            <div class="card-body">
                <div class="col-md-3 mb-1">
                    <a role="button" class="btn btn-primary" @onclick="Add">
                        <i class="bi bi-check-circle me-1"></i>
                        Add Tax
                    </a>
                </div>
                @if (dto.EInvoiceLineTaxes.Any())
                {
                    <TableTemplate Items="dto.EInvoiceLineTaxes" Context="sub" class="table table-striped table-hover">
                        <TableHeader>
                            <th scope="col" class="border-end text-center" style="border-top-left-radius:20px">#</th>
                            <th scope="col" class="border-end">Tax</th>
                            <th scope="col" class="border-end">Amount</th>
                            <th class="text-end" style="border-top-right-radius:20px">Actions</th>
                        </TableHeader>
                        <RowTemplate>
                            <td scope="row" class="border-end text-center" style=@(sub.Item2 == sub.Item3 ? "border-bottom-left-radius:20px" : "")>@sub.Item2</td>
                            <td class="border-end">
                                <ComboBox Id="@(sub.Item1.EInvoiceLineTaxId)" Type="KeyValue" ReGetOnClick="true" DisplayPropertyName="@("Value")" Value="@sub.Item1.TaxName" List="taxesList" GetList="GetTaxes" ValueChanged="TaxChanged"></ComboBox>
                                <ValidationMessage For="@(() => sub.Item1.TaxName)" />
                            </td>
                            <td class="border-end">
                                <InputNumber @bind-Value="sub.Item1.Amount" class="form-control" @bind-Value:after="Calculate" />
                                <ValidationMessage For="@(() => sub.Item1.Amount)" />
                            </td>
                            <td class="text-end" style=@(sub.Item2 == sub.Item3 ? "border-bottom-right-radius:20px" : "")>
                                <a role="button" class="btn btn-sm btn-danger rounded-3" type="button" @onclick="@(() => DeleteRow(sub.Item1))">
                                    <i class="bi bi-trash"></i>
                                </a>
                            </td>
                        </RowTemplate>
                    </TableTemplate>
                    <div class="row my-1">
                        <div class="col-md-2 my-auto">
                            <label>Total</label>
                        </div>
                        <div class="col-md-5 my-auto">
                            <h5>@dto.Total</h5>
                        </div>
                    </div>
                }
                else
                {
                    <h4>No Items</h4>
                }
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Item Net Amount</label>
            </div>
            <div class="col-md-5 my-auto">
                <h5>@dto.ItemNetAmount</h5>
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.ItemNetAmount)" />
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-end">
        @if (Id.HasValue)
        {
            <a role="button" class="btn btn-danger mx-1" @onclick="Delete">Delete</a>
        }
        <button type="submit" class="btn btn-success mx-1 border-0">Save</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public EInvoiceLineDto dto { get; set; } = new();
    [Parameter]
    public List<EInvoiceLineDto> List { get; set; }

    Guid? Id;
    List<KeyValue>? itemsList;
    List<KeyValue>? taxesList;

    protected override void OnInitialized()
    {
        if (dto.EInvoiceLineId.HasValue) Id = dto.EInvoiceLineId;
        else dto.EInvoiceLineId = Guid.NewGuid();
    }
    private void Add()
    {
        dto.EInvoiceLineTaxes.Add(new EInvoiceLineTaxDto() { EInvoiceLineTaxId = Guid.NewGuid(), EInvoiceLineId = dto.EInvoiceLineId });
    }
    private void Delete()
    {
        List.Remove(dto);
    }
    private void DeleteRow(EInvoiceLineTaxDto TaxDto)
    {
        dto.EInvoiceLineTaxes.Remove(TaxDto);
    }
    private void Save()
    {
        LoaderService.ToggleLoader();
        if (List.Any(c => c.EInvoiceLineId == Id))
        {
            var eInvoiceLine = List.First(c => c.EInvoiceLineId == dto.EInvoiceLineId);
            eInvoiceLine.AmountSold = dto.AmountSold;
            eInvoiceLine.Quantity = dto.Quantity;
            eInvoiceLine.ItemId = dto.ItemId;
            eInvoiceLine.ItemName = dto.ItemName;
            eInvoiceLine.ItemNetAmount = dto.ItemNetAmount;
            eInvoiceLine.Total = dto.Total;
            foreach (var item in eInvoiceLine.EInvoiceLineTaxes)
            {
                if (eInvoiceLine.EInvoiceLineTaxes.Any(c => c.EInvoiceLineTaxId == item.EInvoiceLineTaxId))
                {
                    var eInvoiceLineTax = eInvoiceLine.EInvoiceLineTaxes.First(c => c.EInvoiceLineTaxId == item.EInvoiceLineTaxId);
                    eInvoiceLineTax.TaxId = item.TaxId;
                    eInvoiceLineTax.TaxName = item.TaxName;
                    eInvoiceLineTax.Amount = item.Amount;
                }
                else
                {
                    eInvoiceLine.EInvoiceLineTaxes.Add(item);
                }
            }
            ToastService.ShowSuccess("Edited Successfully");
        }
        else
        {
            List.Add((EInvoiceLineDto)dto.Clone());
            Id = dto.EInvoiceLineId;
            ToastService.ShowSuccess("Added Successfully");
        }
        LoaderService.ToggleLoader();
    }
    private async Task GetItems(string? filter)
        => itemsList = await item.GetKeyValue(filter);
    private void ItemChanged(KeyValue? keyValue)
    {
        dto.ItemId = keyValue?.Key;
        dto.ItemName = keyValue?.Value;
    }
    private async Task GetTaxes(string? filter)
        => taxesList = await tax.GetKeyValue(filter);
    private void TaxChanged(KeyValue? keyValue)
    {
        var LineTax = dto.EInvoiceLineTaxes.First(c => c.EInvoiceLineTaxId == keyValue.Id);
        LineTax.TaxId = keyValue?.Key;
        LineTax.TaxName = keyValue?.Value;
    }
    private void Calculate()
    {
        dto.Total = dto.EInvoiceLineTaxes.Sum(c => c.Amount);
        dto.ItemNetAmount = (dto.AmountSold * dto.Quantity) + dto.Total;
    }
}
