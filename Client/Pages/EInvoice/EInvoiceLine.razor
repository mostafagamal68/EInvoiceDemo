@inherits GeneralComponent
@inject IItemsService item
@inject ITaxesService tax

<EditForm Model="dto">
    <ObjectGraphDataAnnotationsValidator />
    <div class="col-md-12 my-1">
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Item</label>
            </div>
            <div class="col-md-5">
                <Select AutoComplete="true" @bind-Value="dto.ItemName" @bind-Key="dto.ItemId" List="itemsList" GetList="GetItems" />
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.ItemName)" />
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Quantity</label>
            </div>
            <div class="col-md-5">
                <InputNumber class="form-control" @bind-Value="dto.Quantity" @bind-Value:after="Calculate" />
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.Quantity)" />
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Amount Sold</label>
            </div>
            <div class="col-md-5">
                <InputNumber class="form-control" @bind-Value="dto.AmountSold" @bind-Value:after="Calculate" />
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.AmountSold)" />
            </div>
        </div>
        <div class="card rounded-3 my-1">
            <div class="card-body">
                <div class="col-md-3 mb-1">
                    <Btn Classes="btn-violet" Text="Add Tax" ValidateEditContext="false" ClickAction="Add">
                        <SpanIcon><i class="bi bi-check-circle me-1"></i></SpanIcon>
                    </Btn>
                </div>
                <TableWithPagination TType="EInvoiceLineTaxDto" Model="taxFilter" WithPagination="false" Context="tax">
                    <RowTemplate>
                        <td class="border-end">
                            <Select @bind-Value="tax.TaxName" @bind-Key="tax.TaxId" List="taxesList" GetList="GetTaxes" />
                            <ValidationMessage For="@(() => tax.TaxName)" />
                        </td>
                        <td class="border-end">
                            <InputNumber @bind-Value="tax.Amount" class="form-control d-inline" @bind-Value:after="Calculate" />
                            <ValidationMessage For="@(() => tax.Amount)" />
                        </td>
                    </RowTemplate>
                    <CustomActions>
                        <Btn Classes="btn-sm btn-danger" ClickAction="() => DeleteRow(tax)">
                            <SpanIcon><i class="bi bi-trash"></i></SpanIcon>
                        </Btn>
                    </CustomActions>
                    <ExtraData>
                        <div class="row my-1">
                            <div class="col-md-2 my-auto">
                                <label>Total</label>
                            </div>
                            <div class="col-md-5 my-auto">
                                <h5>@dto.Total</h5>
                            </div>
                        </div>
                    </ExtraData>
                </TableWithPagination>
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-2 my-auto">
                <label>Item Net Amount</label>
            </div>
            <div class="col-md-5 my-auto">
                <h5>@dto.ItemNetAmount</h5>
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.ItemNetAmount)" />
            </div>
        </div>
    </div>
    <div class="text-end">
        @if (Id.HasValue)
        {
            <Btn ValidateEditContext="false" Classes="btn-danger" Text="Delete" ClickAction="Delete"></Btn>
        }
        <Btn Classes="btn-success" Text="Save" ClickAction="Save" CloseAfterSave="true"></Btn>
    </div>
</EditForm>

@code {
    [Parameter]
    public EInvoiceLineDto dto { get; set; } = new();
    [Parameter]
    public List<EInvoiceLineDto>? List { get; set; }

    Guid? Id;
    EInvoiceLineTaxFilter taxFilter = new();
    List<KeyValue>? itemsList = new();
    List<KeyValue>? taxesList = new();

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = new();

    protected override void OnInitialized()
    {
        if (dto.EInvoiceLineId.HasValue) Id = dto.EInvoiceLineId;
        else dto.EInvoiceLineId = Guid.NewGuid();
        taxFilter.Items = dto.EInvoiceLineTaxes;
    }

    private void Add()
        => dto.EInvoiceLineTaxes.Add(new EInvoiceLineTaxDto() { EInvoiceLineTaxId = Guid.NewGuid(), EInvoiceLineId = dto.EInvoiceLineId });

    private async Task Delete()

    {
        if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this E-Invoice ?"))
        {
            List?.Remove(List.First(c => c.EInvoiceLineId == Id));
            ToastService.ShowSuccess("Deleted Successfully");
            await BlazoredModal.CancelAsync();
        }
    }

    private void DeleteRow(EInvoiceLineTaxDto TaxDto)
    {
        dto.EInvoiceLineTaxes.Remove(TaxDto);
        Calculate();
    }

    private void Save()
    {
        LoaderService.ToggleLoader();
        var messages = new List<string>();
        foreach (var item in dto.EInvoiceLineTaxes.GroupBy(x => x.TaxId).Select(x => new { x.Key, Taxes = x }))
        {
            if (item.Taxes.Count() > 1)
                messages.Add($"{item.Taxes.Select(c => c.TaxName).First()} is duplicated.");
        }
        if (!messages.Any())
        {
            if (List.Any(c => c.EInvoiceLineId == Id))
            {
                var eInvoiceLine = List.First(c => c.EInvoiceLineId == dto.EInvoiceLineId);
                eInvoiceLine.AmountSold = dto.AmountSold;
                eInvoiceLine.Quantity = dto.Quantity;
                eInvoiceLine.ItemId = dto.ItemId;
                eInvoiceLine.ItemName = dto.ItemName;
                eInvoiceLine.ItemNetAmount = dto.ItemNetAmount;
                eInvoiceLine.Total = dto.Total;
                foreach (var lineTax in dto.EInvoiceLineTaxes)
                {
                    if (eInvoiceLine.EInvoiceLineTaxes.Any(c => c.EInvoiceLineTaxId == lineTax.EInvoiceLineTaxId))
                    {
                        var eInvoiceLineTax = eInvoiceLine.EInvoiceLineTaxes.First(c => c.EInvoiceLineTaxId == lineTax.EInvoiceLineTaxId);
                        eInvoiceLineTax.TaxId = lineTax.TaxId;
                        eInvoiceLineTax.TaxName = lineTax.TaxName;
                        eInvoiceLineTax.Amount = lineTax.Amount;
                    }
                    else
                    {
                        eInvoiceLine.EInvoiceLineTaxes.Add(lineTax);
                    }
                }
                eInvoiceLine.EInvoiceLineTaxes.Where(c => !dto.EInvoiceLineTaxes.Any(x => c.EInvoiceLineTaxId == x.EInvoiceLineTaxId)).ToList().ForEach(c => eInvoiceLine.EInvoiceLineTaxes.Remove(c));
            }
            else
            {
                List.Add(dto);
                Id = dto.EInvoiceLineId;
            }
            ToastService.ShowSuccess("Line applied to this E-Invoice Successfully");
        }
        else
        {
            messages.ForEach(c => ToastService.ShowWarning(c));
            ToastService.ShowInfo("Line not applied");
        }
        LoaderService.ToggleLoader();
    }

    private void Calculate()
    {
        dto.Total = dto.EInvoiceLineTaxes.Sum(c => c.Amount);
        dto.ItemNetAmount = (dto.AmountSold * dto.Quantity) + dto.Total;
    }

    private async Task GetItems(string? filter)
        => itemsList = await item.GetKeyValue(filter);
    private async Task GetTaxes(string? filter)
        => taxesList = await tax.GetKeyValue(filter);
}
