@using EInvoiceDemo.Client.Pages.Item
@using EInvoiceDemo.Client.Pages.Tax
@using EInvoiceDemo.Shared.DTOs.EInvoice
@using EInvoiceDemo.Shared.DTOs.Item
@using EInvoiceDemo.Shared.DTOs.Tax
@inject IToastService ToastService
@implements IForm

<Form TDto="EInvoiceLineDto"
TFilter="EInvoiceLineFilter"
Dto="Dto"
SubmitLogic="Save"
ShowActions=false>
    <Field Name="Item" For="() => Dto.ItemName">
        <Select AutoComplete="true" @bind-Value="Dto.ItemName" @bind-Key="Dto.ItemId" TDto="ItemDto" TFilter="ItemsFilter" />
    </Field>

    <Field Name="Quantity" For="() => Dto.Quantity">
        <InputDecimal class="form-control" @bind-Value="Dto.Quantity" @bind-Value:after="Calculate" />
    </Field>

    <Field Name="Amount Sold" For="() => Dto.AmountSold">
        <InputDecimal class="form-control" @bind-Value="Dto.AmountSold" @bind-Value:after="Calculate" />
    </Field>

    <div class="card rounded-3 my-1">
        <div class="card-body">
            <div class="col-md-3 mb-1">
                <Btn class="btn-violet" Text="Add Tax" ClickAction="Add" Icon="bi bi-check-circle" />
            </div>
            <Grid TForm=EInvoiceLine TDto=EInvoiceLineTaxDto TFilter=EInvoiceLineTaxFilter Items=Dto.EInvoiceLineTaxes TableDesignType=TableDesign.List
            WithEdit=false WithDelete=false WithPagination=false ShowActions=false ShowSort=false Context=taxes>
                <RowTemplate>
                    <span>
                        <span class="badge rounded-pill shadow-sm">
                            Tax:
                        </span>
                        <Select @bind-Value="taxes.TaxName" @bind-Key="taxes.TaxId" TDto="TaxDto" TFilter="TaxesFilter" />
                        <ValidationMessage For="() => taxes.TaxName" />
                    </span>
                    <span>
                        <span class="badge rounded-pill shadow-sm">
                            Amount:
                        </span>
                        <div>
                            <InputDecimal @bind-Value="taxes.Amount" class="form-control d-inline" @bind-Value:after="Calculate" />
                        </div>
                        <ValidationMessage For="@(() => taxes.Amount)" />
                    </span>
                </RowTemplate>
                <CustomActions>
                    <Btn class="btn-sm btn-danger" ClickAction="() => DeleteRow(taxes)" Icon="bi bi-trash" />
                </CustomActions>
                <ExtraData>
                    <Field Name="Total" For="@(() => Dto.Total)">
                        <h5>@Dto.Total?.TrimZeroes()</h5>
                    </Field>
                </ExtraData>
            </Grid>
        </div>
    </div>

    <Field Name="Item Net Amount" For="() => Dto.ItemNetAmount">
        <h5>@Dto.ItemNetAmount?.TrimZeroes()</h5>
    </Field>
</Form>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    [Parameter]
    public EInvoiceLineDto Dto { get; set; } = new();

    [Parameter]
    public List<EInvoiceLineDto> List { get; set; } = [];

    private void Add()
        => Dto.EInvoiceLineTaxes.Add(new EInvoiceLineTaxDto() { Id = Guid.NewGuid(), EInvoiceLineId = Dto.Id });

    private void DeleteRow(EInvoiceLineTaxDto TaxDto)
    {
        Dto.EInvoiceLineTaxes.Remove(TaxDto);
        Calculate();
    }

    private Task<bool> Save(EInvoiceLineDto context)
    {
        List<string> messages = [];
        foreach (var items in Dto.EInvoiceLineTaxes.GroupBy(x => x.TaxId).Select(x => new { x.Key, Taxes = x }).Where(x => x.Taxes.Count() > 1))
        {
            messages.Add($"{items.Taxes.Select(c => c.TaxName).First()} is duplicated.");
        }

        if (!messages.Any())
        {
            if (List.Any(c => c.Id == Dto.Id))
            {
                var eInvoiceLine = List.First(c => c.Id == Dto.Id);
                eInvoiceLine.AmountSold = Dto.AmountSold;
                eInvoiceLine.Quantity = Dto.Quantity;
                eInvoiceLine.ItemId = Dto.ItemId;
                eInvoiceLine.ItemName = Dto.ItemName;
                eInvoiceLine.ItemNetAmount = Dto.ItemNetAmount;
                eInvoiceLine.Total = Dto.Total;
                foreach (var lineTax in Dto.EInvoiceLineTaxes)
                {
                    if (eInvoiceLine.EInvoiceLineTaxes.Any(c => c.Id == lineTax.Id))
                    {
                        var eInvoiceLineTax = eInvoiceLine.EInvoiceLineTaxes.First(c => c.Id == lineTax.Id);
                        eInvoiceLineTax.TaxId = lineTax.TaxId;
                        eInvoiceLineTax.TaxName = lineTax.TaxName;
                        eInvoiceLineTax.Amount = lineTax.Amount;
                    }
                    else
                    {
                        eInvoiceLine.EInvoiceLineTaxes.Add(lineTax);
                    }
                }
                eInvoiceLine.EInvoiceLineTaxes.Where(c => !Dto.EInvoiceLineTaxes.Any(x => c.Id == x.Id)).ToList().ForEach(c => eInvoiceLine.EInvoiceLineTaxes.Remove(c));
            }
            else
            {
                Dto.Id = Guid.NewGuid();
                List.Add(Dto);
            }

            ToastService.ShowSuccess("Line applied to this E-Invoice Successfully");
        }
        else
        {
            messages.ForEach(c => ToastService.ShowWarning(c));
            ToastService.ShowInfo("Line not applied");
        }

        return Task.FromResult(true);
    }

    private void Calculate()
    {
        Dto.Total = Dto.EInvoiceLineTaxes.Sum(c => c.Amount);
        Dto.ItemNetAmount = (Dto.AmountSold * Dto.Quantity) + Dto.Total;
    }
}
