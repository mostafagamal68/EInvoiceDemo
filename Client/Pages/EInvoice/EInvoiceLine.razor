@using EInvoiceDemo.Client.Pages.Item
@using EInvoiceDemo.Client.Pages.Tax
@inherits GeneralComponent

<EditForm Model="dto">
    <ObjectGraphDataAnnotationsValidator />
    <div class="col-md-12 my-1">
        
        <Field Name="Item" For="@(() => dto.ItemName)">
            <Select AutoComplete="true" @bind-Value="dto.ItemName" @bind-Key="dto.ItemId" TDto="ItemDto" TFilter="ItemsFilter" />
        </Field>
        
        <Field Name="Quantity" For="@(() => dto.Quantity)">
            <InputNumber class="form-control" @bind-Value="dto.Quantity" @bind-Value:after="Calculate" />
        </Field>
        
        <Field Name="Amount Sold" For="@(() => dto.AmountSold)">
            <InputNumber class="form-control" @bind-Value="dto.AmountSold" @bind-Value:after="Calculate" />
        </Field>

        <div class="card rounded-3 my-1">
            <div class="card-body">
                <div class="col-md-3 mb-1">
                    <Btn class="btn-violet" Text="Add Tax" ClickAction="Add" Icon="bi bi-check-circle" />
                </div>
                <Grid TDto=EInvoiceLineTaxDto TFilter=EInvoiceLineTaxFilter Model=taxFilter TableDesignType=TableDesign.List
                      WithEdit=false WithDelete=false WithPagination=false ShowActions=false ShowSort=false Context=taxes>
                    <RowTemplate>
                        <span>
                            <span class="badge rounded-pill shadow-sm">
                                Tax:
                            </span>
                            <Select @bind-Value="taxes.TaxName" @bind-Key="taxes.TaxId" TDto="TaxDto" TFilter="TaxesFilter" />
                            <ValidationMessage For="@(() => taxes.TaxName)" />
                        </span>
                        <span>
                            <span class="badge rounded-pill shadow-sm">
                                Amount:
                            </span>
                            <div>
                                <InputNumber @bind-Value="taxes.Amount" class="form-control d-inline" @bind-Value:after="Calculate" />
                            </div>
                            <ValidationMessage For="@(() => taxes.Amount)" />
                        </span>
                    </RowTemplate>
                    <CustomActions>
                        <Btn class="btn-sm btn-danger" ClickAction="() => DeleteRow(taxes)" Icon="bi bi-trash" />
                    </CustomActions>
                    <ExtraData>                        
                        <Field Name="Total" For="@(() => dto.Total)">
                            <h5>@dto.Total?.ToString(2)</h5>
                        </Field>
                    </ExtraData>
                </Grid>
            </div>
        </div>
        
        <Field Name="Item Net Amount" For="@(() => dto.ItemNetAmount)">
            <h5>@dto.ItemNetAmount?.ToString(2)</h5>
        </Field>

    </div>
    <div class="d-flex justify-content-end align-items-center gap-2 flex-wrap">
        @if (Id.HasValue)
        {
            <Btn class="btn-danger" Text="Delete" ClickAction="Delete" />
        }
        <Btn class="btn-success" Text="Save" ValidateModel="true" ClickAction="Save" CloseAfterSave="true" />
    </div>
</EditForm>

@code {
    [Parameter]
    public EInvoiceLineDto dto { get; set; } = new();
    [Parameter]
    public List<EInvoiceLineDto> List { get; set; } = new();

    // [CascadingParameter]
    // BlazoredModalInstance BlazoredModal { get; set; } = new();
    [CascadingParameter]
    public ModalData ModalObject { get; set; }

    EInvoiceLineTaxFilter taxFilter = new();

    protected override void OnInitialized()
    {
        if (dto.Id != Guid.Empty) Id = dto.Id;
        else dto.Id = Guid.NewGuid();
        taxFilter.Items = dto.EInvoiceLineTaxes;
    }

    private void Add()
        => dto.EInvoiceLineTaxes.Add(new EInvoiceLineTaxDto() { Id = Guid.NewGuid(), EInvoiceLineId = dto.Id });

    private async Task Delete()
    {
        if (await ShowDeleteConfirmation("EInvoice Line"))
        {
            List?.Remove(List.First(c => c.Id == Id));
            ToastService.ShowSuccess("Deleted Successfully");
            ModalService.Close(ModalObject);
        }
    }

    private void DeleteRow(EInvoiceLineTaxDto TaxDto)
    {
        dto.EInvoiceLineTaxes.Remove(TaxDto);
        Calculate();
    }

    private void Save()
    {
        LoaderService.ToggleLoader();
        var messages = new List<string>();
        foreach (var items in dto.EInvoiceLineTaxes.GroupBy(x => x.TaxId).Select(x => new { x.Key, Taxes = x }))
        {
            if (items.Taxes.Count() > 1)
                messages.Add($"{items.Taxes.Select(c => c.TaxName).First()} is duplicated.");
        }
        if (!messages.Any())
        {
            if (List.Any(c => c.Id == Id))
            {
                var eInvoiceLine = List.First(c => c.Id == dto.Id);
                eInvoiceLine.AmountSold = dto.AmountSold;
                eInvoiceLine.Quantity = dto.Quantity;
                eInvoiceLine.ItemId = dto.ItemId;
                eInvoiceLine.ItemName = dto.ItemName;
                eInvoiceLine.ItemNetAmount = dto.ItemNetAmount;
                eInvoiceLine.Total = dto.Total;
                foreach (var lineTax in dto.EInvoiceLineTaxes)
                {
                    if (eInvoiceLine.EInvoiceLineTaxes.Any(c => c.Id == lineTax.Id))
                    {
                        var eInvoiceLineTax = eInvoiceLine.EInvoiceLineTaxes.First(c => c.Id == lineTax.Id);
                        eInvoiceLineTax.TaxId = lineTax.TaxId;
                        eInvoiceLineTax.TaxName = lineTax.TaxName;
                        eInvoiceLineTax.Amount = lineTax.Amount;
                    }
                    else
                    {
                        eInvoiceLine.EInvoiceLineTaxes.Add(lineTax);
                    }
                }
                eInvoiceLine.EInvoiceLineTaxes.Where(c => !dto.EInvoiceLineTaxes.Any(x => c.Id == x.Id)).ToList().ForEach(c => eInvoiceLine.EInvoiceLineTaxes.Remove(c));
            }
            else
            {
                List.Add(dto);
                Id = dto.Id;
            }
            ToastService.ShowSuccess("Line applied to this E-Invoice Successfully");
        }
        else
        {
            messages.ForEach(c => ToastService.ShowWarning(c));
            ToastService.ShowInfo("Line not applied");
        }
        LoaderService.ToggleLoader();
    }

    private void Calculate()
    {
        dto.Total = dto.EInvoiceLineTaxes.Sum(c => c.Amount);
        dto.ItemNetAmount = (dto.AmountSold * dto.Quantity) + dto.Total;
    }
}
