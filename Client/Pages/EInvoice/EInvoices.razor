@page "/EInvoices"
@inherits GeneralComponent
@inject IEInvoicesService service
@inject ICustomersService customer
@inject IEInvoiceTypesService type

<div class="d-flex justify-content-end align-items-center mb-3">
    <a role="button" class="btn btn-violet rounded-3" @onclick="@(()=>GoTo("EInvoice","EInvoice",true))">
        <i class="bi bi-plus-circle mx-1"></i>
        Add
    </a>
</div>
<div class="d-flex justify-content-start my-1">
    <div>
        <label>Type</label>
        <ComboBox Type="KeyValue" ReGetOnClick="true" DisplayPropertyName="@("Value")" Value="@EInvoicesFilter.EInvoiceTypeName" List="typesList" GetList="GetTypes" ValueChanged="TypeChanged"></ComboBox>
    </div>
    <div class="mx-2">
        <label>Customer</label>
        <ComboBox AutoComplete="true" Type="KeyValue" DisplayPropertyName="@("Value")" List="customersList" GetList="GetCustomers" ValueChanged="CustomerChanged"></ComboBox>
    </div>
    <div class="mx-2">
        <label>Date From</label>
        <input type="datetime-local" class="form-control" @bind="EInvoicesFilter.DateTimeIssuedFrom" />
    </div>
    <div class="mx-2">
        <label>Date To</label>
        <input type="datetime-local" class="form-control" @bind="EInvoicesFilter.DateTimeIssuedTo" />
    </div>
</div>
<div class="d-flex justify-content-end align-items-center my-2">
    <Btn Classes="btn-primary" Text="Clear" ClickAction="async () => { EInvoicesFilter = new(); await GetEInvoicesFiltered();}">
        <SpanIcon><i class="bi bi-x me-1"></i></SpanIcon>
    </Btn>
    <Btn Classes="btn-success" Text="Search" ClickAction="GetEInvoicesFiltered">
        <SpanIcon><i class="bi bi-search me-1"></i></SpanIcon>
    </Btn>
</div>
@if (!LoaderService.IsLoading)
{
    @if (EInvoicesFilter?.Items.Count() == 0)
    {
        <div class="d-flex alert alert-warning align-EInvoices-center">
            <h5><i class="bi bi-exclamation-triangle mx-2"></i>No EInvoices</h5>
        </div>
    }
    else
    {
        <TableTemplate Items="EInvoicesFilter?.Items" Context="sub" class="table table-striped table-hover">
            <TableHeader>
                <th scope="col" class="border-end text-center" style="border-top-left-radius:20px">#</th>
                <th scope="col" class="border-end" style="cursor: pointer;" @onclick="@(async () => await SortBy("EInvoiceCode"))">Code</th>
                <th scope="col" class="border-end" style="cursor: pointer;" @onclick="@(async () => await SortBy("CustomerName"))">Customer</th>
                <th scope="col" class="border-end" style="cursor: pointer;" @onclick="@(async () => await SortBy("EInvoiceTypeName"))">Type</th>
                <th scope="col" class="border-end" style="cursor: pointer;" @onclick="@(async () => await SortBy("DateTimeIssued"))">Date</th>
                <th scope="col" class="border-end" style="cursor: pointer;" @onclick="@(async () => await SortBy("NetAmount"))">Net Amount</th>
                <th class="text-end" style="border-top-right-radius:20px">Actions</th>
            </TableHeader>
            <RowTemplate>
                <td scope="row" class="border-end text-center" style=@(sub.Item2 == sub.Item3 ? "border-bottom-left-radius:20px" : "")>@sub.Item2</td>
                <td class="border-end">@sub.Item1.EInvoiceCode</td>
                <td class="border-end">@sub.Item1.CustomerName</td>
                <td class="border-end">@sub.Item1.EInvoiceTypeName</td>
                <td class="border-end">@sub.Item1.DateTimeIssued?.ToDateString()</td>
                <td class="border-end">@sub.Item1.NetAmount</td>
                <td class="text-end" style=@(sub.Item2 == sub.Item3 ? "border-bottom-right-radius:20px" : "")>
                    <a role="button" class="btn btn-sm btn-warning rounded-3" type="button"
                        @onclick="@(() => GoTo("EInvoice","EInvoice",true, sub.Item1.EInvoiceId))">
                        <i class="bi bi-pencil-square"></i>
                    </a>
                    <a role="button" class="btn btn-sm btn-danger rounded-3" type="button" @onclick="@(() => DeleteRow(sub.Item1.EInvoiceId))">
                        <i class="bi bi-trash"></i>
                    </a>
                </td>
            </RowTemplate>
        </TableTemplate>
    }

    <Paginator Pagination="EInvoicesFilter?.Pagination" GetPage="GetEInvoicesFiltered"></Paginator>
}
@code {
    EInvoicesFilter EInvoicesFilter = new();
    List<KeyValue>? customersList;
    List<KeyValue>? typesList;
    protected override async Task OnInitializedAsync()
    {
        HeaderService.ChangeHeaderAndTitle("E-Invoices");
        LoaderService.ToggleLoader();
        await GetEInvoicesFiltered();
        LoaderService.ToggleLoader();
    }
    private async Task GetEInvoicesFiltered() => EInvoicesFilter = await service.GetList(EInvoicesFilter);
    private async Task DeleteRow(Guid Id)
    {
        if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this EInvoice?"))
        {
            var response = await service.Delete(Id);
            if (response.IsSuccessStatusCode)
                EInvoicesFilter.Items.Remove(EInvoicesFilter.Items.First(c => c.EInvoiceId == Id));
            await ShowResultMessage(response);
        }
    }
    private async Task GetCustomers(string? filter)
        => customersList = await customer.GetKeyValue(filter);
    private void CustomerChanged(KeyValue? keyValue)
    {
        EInvoicesFilter.CustomerId = keyValue?.Key;
        EInvoicesFilter.CustomerName = keyValue?.Value;
    }
    private async Task GetTypes(string? filter)
        => typesList = await type.GetKeyValue(filter);
    private void TypeChanged(KeyValue? keyValue)
    {
        EInvoicesFilter.EInvoiceTypeId = keyValue?.Key;
        EInvoicesFilter.EInvoiceTypeName = keyValue?.Value;
    }
    private async Task SortBy(string Field)
    {
        EInvoicesFilter.SortField = Field;
        EInvoicesFilter.SortApproach = !EInvoicesFilter.SortApproach;
        await GetEInvoicesFiltered();
    }
}
