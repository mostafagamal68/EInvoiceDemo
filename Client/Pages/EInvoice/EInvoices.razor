@page "/EInvoices"
@inherits GeneralComponent
@inject IEInvoicesService service
@inject ICustomersService customer
@inject IEInvoiceTypesService type

<div class="d-flex justify-content-end align-items-center mb-3">
    <Btn Classes="btn-violet" Text="Add" ClickAction="@(()=>GoTo("EInvoice", true))">
        <SpanIcon><i class="bi bi-plus-circle me-1"></i></SpanIcon>
    </Btn>
</div>
<div class="d-flex justify-content-start flex-wrap gap-2 my-1">
    <div class="flex-grow-1">
        <label>Type</label>
        <ComboBox Value="@EInvoicesFilter.EInvoiceTypeName" List="typesList" GetList="GetTypes" ValueChanged="TypeChanged"></ComboBox>
    </div>
    <div class="flex-grow-1">
        <label>Customer</label>
        <ComboBox AutoComplete="true" List="customersList" GetList="GetCustomers" ValueChanged="CustomerChanged"></ComboBox>
    </div>
    <div class="flex-grow-1">
        <label>Date From</label>
        <input type="datetime-local" class="form-control" @bind="EInvoicesFilter.DateTimeIssuedFrom" />
    </div>
    <div class="flex-grow-1">
        <label>Date To</label>
        <input type="datetime-local" class="form-control" @bind="EInvoicesFilter.DateTimeIssuedTo" />
    </div>
</div>
<div class="d-flex justify-content-end my-2">
    <Btn Classes="btn-primary" Text="Clear" ClickAction="async () => { EInvoicesFilter = new(); await GetEInvoicesFiltered();}">
        <SpanIcon><i class="bi bi-x me-1"></i></SpanIcon>
    </Btn>
    <Btn Classes="btn-success" Text="Search" ClickAction="GetEInvoicesFiltered">
        <SpanIcon><i class="bi bi-search me-1"></i></SpanIcon>
    </Btn>
</div>
@if (!LoaderService.IsLoading)
{
    @if (EInvoicesFilter?.Items.Count() == 0)
    {
        <div class="d-flex alert alert-warning align-EInvoices-center">
            <h5><i class="bi bi-exclamation-triangle mx-2"></i>No EInvoices</h5>
        </div>
    }
    else
    {
        <TableWithPagination TType="EInvoiceDto" TItem="EInvoicesFilter" Model="EInvoicesFilter"
                             Filter="GetEInvoicesFiltered" Actions="@((args) => TableActions(args.Id, args.IsDelete))">
        </TableWithPagination>
    }
}
@code {
    EInvoicesFilter EInvoicesFilter = new();
    List<KeyValue>? customersList;
    List<KeyValue>? typesList;
    protected override async Task OnInitializedAsync()
    {
        HeaderService.ChangeHeaderAndTitle("E-Invoices");
        LoaderService.ToggleLoader();
        await GetEInvoicesFiltered();
        LoaderService.ToggleLoader();
    }
    private async Task GetEInvoicesFiltered() => EInvoicesFilter = await service.GetList(EInvoicesFilter);
    private async Task TableActions(Guid Id, bool IsDelete)
    {
        if (IsDelete)
        {
            if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this EInvoice?"))
            {
                var response = await service.Delete(Id);
                if (response.IsSuccessStatusCode)
                    EInvoicesFilter.Items.Remove(EInvoicesFilter.Items.First(c => c.EInvoiceId == Id));
                await ShowResultMessage(response);
            }
        }
        else
        {
            GoTo("EInvoice", true, Id);
        }
    }
    private async Task GetCustomers(string? filter)
        => customersList = await customer.GetKeyValue(filter);
    private void CustomerChanged(KeyValue? keyValue)
    {
        EInvoicesFilter.CustomerId = keyValue?.Key;
        EInvoicesFilter.CustomerName = keyValue?.Value;
    }
    private async Task GetTypes(string? filter)
        => typesList = await type.GetKeyValue(filter);
    private void TypeChanged(KeyValue? keyValue)
    {
        EInvoicesFilter.EInvoiceTypeId = keyValue?.Key;
        EInvoicesFilter.EInvoiceTypeName = keyValue?.Value;
    }
    private async Task SortBy(string Field)
    {
        EInvoicesFilter.SortField = Field;
        EInvoicesFilter.SortApproach = !EInvoicesFilter.SortApproach;
        await GetEInvoicesFiltered();
    }
}
