@page "/EInvoiceTypes"
@inherits GeneralComponent
@inject IEInvoiceTypesService service

<div class="d-flex justify-content-end align-items-center mb-3">
    <a role="button" class="btn btn-violet rounded-3" @onclick="@(()=>ShowModal(typeof(EInvoiceType), "Add - E-Invoice Type", afterClose: GetEInvoiceTypesFiltered))">
        <i class="bi bi-plus-circle mx-1"></i>
        Add
    </a>
</div>
<div class="d-flex justify-content-start mb-3">
    <div>
        <label>Name</label>
        <input class="form-control" @bind="EInvoiceTypesFilter.EInvoiceTypeName" @bind:event="oninput" @bind:after="GetEInvoiceTypesFiltered" />
    </div>
</div>
@if (!LoaderService.IsLoading)
{
    @if (EInvoiceTypesFilter?.Items.Count() == 0)
    {
        <div class="d-flex alert alert-warning align-items-center">
            <h5><i class="bi bi-exclamation-triangle mx-2"></i>No E-Invoice Types</h5>
        </div>
    }
    else
    {
        <TableWithPagination TType="EInvoiceTypeDto" TItem="EInvoiceTypesFilter" Model="EInvoiceTypesFilter"
                       Filter="GetEInvoiceTypesFiltered" Actions="@((args) => TableActions(args.Id, args.IsDelete))">
        </TableWithPagination>
    }
}
@code {
    EInvoiceTypesFilter EInvoiceTypesFilter = new();
    protected override async Task OnInitializedAsync()
    {
        HeaderService.ChangeHeaderAndTitle("E-Invocie Types");
        LoaderService.ToggleLoader();
        await GetEInvoiceTypesFiltered();
        LoaderService.ToggleLoader();
    }
    private async Task GetEInvoiceTypesFiltered() => EInvoiceTypesFilter = await service.GetList(EInvoiceTypesFilter);
    private async Task TableActions(Guid Id, bool IsDelete)
    {
        if (IsDelete)
        {
            if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this E-Invoice Type?"))
            {
                var response = await service.Delete(Id);
                if (response.IsSuccessStatusCode)
                    EInvoiceTypesFilter.Items.Remove(EInvoiceTypesFilter.Items.First(c => c.EInvoiceTypeId == Id));
                await ShowResultMessage(response);
            }
        }
        else
        {
            await ShowModal(typeof(EInvoiceType), "Edit - E-Invoice Type", new ModalParameters().Add(nameof(EInvoiceType.IsModal), true).Add(nameof(EInvoiceType.Id), Id), GetEInvoiceTypesFiltered);
        }
    }
    private async Task SortBy(string Field)
    {
        EInvoiceTypesFilter.SortField = Field;
        EInvoiceTypesFilter.SortApproach = !EInvoiceTypesFilter.SortApproach;
        await GetEInvoiceTypesFiltered();
    }

}
