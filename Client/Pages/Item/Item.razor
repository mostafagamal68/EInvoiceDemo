@page "/Item/{Id:guid?}"
@inherits GeneralComponent
@inject IItemsService service

<EditForm Model="dto">
    <DataAnnotationsValidator />
    <div class="col-md-12 my-2">
        <div class="row my-1">
            <div class="col-md-3 my-auto">
                <label>Code</label>
            </div>
            <div class="col-md-6">
                <InputNumber class="form-control" @bind-Value="dto.ItemCode" />
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.ItemCode)" />
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-3 my-auto">
                <label>Name</label>
            </div>
            <div class="col-md-6">
                <InputText class="form-control" @bind-Value="dto.ItemName" />
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.ItemName)" />
            </div>
        </div>
        <div class="row my-1">
            <div class="col-md-3 my-auto">
                <label>Description</label>
            </div>
            <div class="col-md-6">
                <InputTextArea class="form-control" @bind-Value="dto.ItemDescription" />
            </div>
            <div class="col-md my-auto">
                <ValidationMessage For="@(() => dto.ItemDescription)" />
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-end align-items-center">
        @if (Id.HasValue)
        {
            <Btn ValidateEditContext="false" Classes="btn-info" Text="New" ClickAction="New"></Btn>
            <Btn ValidateEditContext="false" Classes="btn-danger" Text="Delete" ClickAction="Delete"></Btn>
        }
        <Btn Type="submit" Classes="btn-success" Text="Save" ClickAction="HandlValidSubmit"></Btn>
    </div>
</EditForm>
@code {
    [Parameter]
    public Guid? Id { get; set; }
    ItemDto dto = new();
    protected override async Task OnInitializedAsync()
    {
        await GetItem();
    }
    private async Task GetItem()
    {
        if (!IsModal) HeaderService.ChangeHeaderAndTitle((Id.HasValue ? "Edit" : "Add") + " Item");
        LoaderService.ToggleLoader();
        if (Id.HasValue) dto = await service.GetSingle(Id);
        else dto.ItemCode = await service.GetCode();
        LoaderService.ToggleLoader();        
    }
    private async Task HandlValidSubmit()
    {
        HttpResponseMessage httpResponseMessage;
        if (!Id.HasValue)
        {
            dto.ItemId = Guid.NewGuid();
            httpResponseMessage = await service.Create(dto);
            if (httpResponseMessage.IsSuccessStatusCode)
                Id = dto.ItemId;
            // GoTo("Item", "EInvoice Type", true, dto.ItemId);
        }
        else
            httpResponseMessage = await service.Edit(dto);
        await ShowResultMessage(httpResponseMessage);

    }
    private async Task New()
    {
        Id = null;
        dto = new ItemDto();
        await GetItem();
    }
    private async Task Delete()
    {
        if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this Item?"))
        {
            var response = await service.Delete(Id);
            if (response.IsSuccessStatusCode)
                GoTo("Items");
            await ShowResultMessage(response);
        }
    }
}
