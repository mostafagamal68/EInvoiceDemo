@page "/Items"
@inherits GeneralComponent
@inject IItemsService service

<div class="d-flex justify-content-end align-items-center mb-3">
    <a role="button" class="btn btn-violet rounded-3" @onclick="@(()=>ShowModal(typeof(Item), "Add - Item", afterClose: GetItemsFiltered))">
        <i class="bi bi-plus-circle mx-1"></i>
        Add
    </a>
</div>
<div class="d-flex justify-content-start mb-3">
    <div>
        <label>Name</label>
        <input class="form-control" @bind="ItemsFilter.ItemName" @bind:event="oninput" @bind:after="GetItemsFiltered" />
    </div>
</div>
@if (!LoaderService.IsLoading)
{
    <TableWithPagination TType="ItemDto" Model="ItemsFilter" Filter="GetItemsFiltered"
                         Actions="@((args) => TableActions(args.Id, args.IsDelete))">
    </TableWithPagination>
}
@code {
    ItemsFilter ItemsFilter = new();
    protected override async Task OnInitializedAsync()
    {
        HeaderService.ChangeHeaderAndTitle("Items");
        LoaderService.ToggleLoader();
        await GetItemsFiltered();
        LoaderService.ToggleLoader();
    }
    private async Task GetItemsFiltered() => ItemsFilter = await service.GetList(ItemsFilter);
    private async Task TableActions(Guid Id, bool IsDelete)
    {
        if (IsDelete)
        {
            if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this Item?"))
            {
                var response = await service.Delete(Id);
                if (response.IsSuccessStatusCode)
                    ItemsFilter.Items.Remove(ItemsFilter.Items.First(c => c.ItemId == Id));
                await ShowResultMessage(response);
            }
        }
        else
        {
            await ShowModal(typeof(Item), "Edit - Item", new ModalParameters().Add(nameof(Item.IsModal), true).Add(nameof(Item.Id), Id), GetItemsFiltered);
        }
    }
    private async Task SortBy(string Field)
    {
        ItemsFilter.SortField = Field;
        ItemsFilter.SortApproach = !ItemsFilter.SortApproach;
        await GetItemsFiltered();
    }

}
