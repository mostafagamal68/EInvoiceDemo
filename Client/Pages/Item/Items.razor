@page "/Items"
@inherits GeneralComponent
@inject IGenericService<ItemsFilter, ItemDto> items

<div class="text-end my-1">
    <Btn class="btn-violet" Text="Add" Icon="bi bi-plus-circle"
         ClickAction="@(() => ShowModal(typeof(Item), $"Add - {nameof(Item)}", afterClose: GetItemsFiltered))" />
</div>
<div class="d-flex justify-content-start flex-wrap gap-2 my-1">
    <div>
        <label>Name</label>
        <input class="form-control" @bind="filter.ItemName" @bind:event="oninput" @bind:after="GetItemsFiltered" />
    </div>
</div>
@if (!LoaderService.IsLoading)
{
    <TableWithPagination TType="ItemDto" Model="filter" Filter="GetItemsFiltered"
                         Actions="@((args) => TableActions(args.Id, args.IsDelete))">
    </TableWithPagination>
}
@code {
    ItemsFilter filter = new();

    protected override async Task OnInitializedAsync()
    {
        items.Api = nameof(Items);
        HeaderService.ChangeHeaderAndTitle(nameof(Items));
        LoaderService.ToggleLoader();
        await GetItemsFiltered();
        LoaderService.ToggleLoader();
    }

    private async Task GetItemsFiltered()
        => filter = await items.GetList(filter);

    private async Task TableActions(Guid Id, bool IsDelete)
    {
        if (IsDelete)
        {
            if (await ShowDeleteConfirmation(nameof(Item)))
            {
                var response = await items.Delete(Id);
                if (response.IsSuccessStatusCode)
                    filter.Items.Remove(filter.Items.First(c => c.ItemId == Id));
                await ShowResultMessage(response);
            }
        }
        else
            await ShowModal(
                typeof(Item),
                $"Edit - {nameof(Item)}",
                new ModalParameters().Add(nameof(Item.IsModal), true).Add(nameof(Item.Id), Id),
                GetItemsFiltered);
    }
}
