@page "/Items"
@inherits GeneralComponent
@inject IItemsService service
@* <PageTitle>Items</PageTitle> *@
<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>EInvoice Types</h3>
    <a role="button" class="btn btn-primary rounded-3" @onclick="@(()=>ShowModal(typeof(Item), "Item", GetItemsFiltered))">
        <i class="bi bi-plus-circle mx-1"></i>
        Add
    </a>
</div>
<div class="d-flex justify-content-start mb-3">
    <div>
        <label>Name</label>
        <input class="form-control" @bind="ItemsFilter.ItemName" @bind:event="oninput" @bind:after="GetItemsFiltered" />
    </div>
</div>
@if (!LoaderService.IsLoading)
{
    @if (ItemsFilter?.Items.Count() == 0)
    {
        <div class="d-flex alert alert-warning align-items-center">
            <h5><i class="bi bi-exclamation-triangle mx-2"></i>No E-Invoice Types</h5>
        </div>
    }
    else
    {
        <TableTemplate Items="ItemsFilter?.Items" Context="sub" class="table table-striped table-hover">
            <TableHeader>
                <th scope="col" class="border-end text-center" style="border-top-left-radius:20px">#</th>
                <th scope="col" class="border-end">Code</th>
                <th scope="col" class="border-end">Name</th>
                <th scope="col" class="border-end">Description</th>
                <th class="text-end" style="border-top-right-radius:20px">Actions</th>
            </TableHeader>
            <RowTemplate>
                <td scope="row" class="border-end text-center" style=@(sub.Item2 == sub.Item3 ? "border-bottom-left-radius:20px" : "")>@sub.Item2</td>
                <td class="border-end">@sub.Item1.ItemCode</td>
                <td class="border-end">@sub.Item1.ItemName</td>
                <td class="border-end">@sub.Item1.ItemDescription</td>
                <td class="text-end" style=@(sub.Item2 == sub.Item3 ? "border-bottom-right-radius:20px" : "")>
                    <a role="button" class="btn btn-sm btn-warning rounded-3" type="button"
                    @onclick="@(() => ShowModal(typeof(Item), "Item", GetItemsFiltered, new ModalParameters().Add(nameof(Item.IsModal), true).Add(nameof(Item.Id), sub.Item1.ItemId)))">
                        <i class="bi bi-pencil-square"></i>
                    </a>
                    <a role="button" class="btn btn-sm btn-danger rounded-3" type="button" @onclick="@(() => DeleteRow(sub.Item1.ItemId))">
                        <i class="bi bi-trash"></i>
                    </a>
                </td>
            </RowTemplate>
        </TableTemplate>
    }

    <Paginator Type="ItemsFilter" Filter="ItemsFilter" Pagination="ItemsFilter?.Pagination" GetPage="GetItemsFiltered"></Paginator>
}
@code {
    ItemsFilter ItemsFilter = new();
    protected override async Task OnInitializedAsync()
    {
        LoaderService.ToggleLoader();
        await GetItemsFiltered();
        LoaderService.ToggleLoader();
    }
    private async Task GetItemsFiltered() => ItemsFilter = await service.GetList(ItemsFilter);
    private async Task DeleteRow(Guid Id)
    {
        if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this Item?"))
        {
            var response = await service.Delete(Id);
            if (response.IsSuccessStatusCode)
                ItemsFilter.Items.Remove(ItemsFilter.Items.First(c => c.ItemId == Id));
            await ShowResultMessage(response);
        }
    }

}
