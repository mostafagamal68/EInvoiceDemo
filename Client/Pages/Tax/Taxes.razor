@page "/Taxes"
@inherits GeneralComponent
@inject ITaxesService service

<div class="d-flex justify-content-end align-items-center mb-3">
    <a role="button" class="btn btn-violet rounded-3" @onclick="@(()=>ShowModal(typeof(Tax), "Add - Tax", afterClose: GetTaxesFiltered))">
        <i class="bi bi-plus-circle mx-1"></i>
        Add
    </a>
</div>
<div class="d-flex justify-content-start mb-3">
    <div>
        <label>Name</label>
        <input class="form-control" @bind="TaxesFilter.TaxName" @bind:event="oninput" @bind:after="GetTaxesFiltered" />
    </div>
</div>
@if (!LoaderService.IsLoading)
{
    @if (TaxesFilter?.Items.Count() == 0)
    {
        <div class="d-flex alert alert-warning align-Taxs-center">
            <h5><i class="bi bi-exclamation-triangle mx-2"></i>No Taxes</h5>
        </div>
    }
    else
    {
        <TableWithPagination TType="TaxDto" TItem="TaxesFilter" Model="TaxesFilter"
                       Filter="GetTaxesFiltered" Actions="@((args) => TableActions(args.Id, args.IsDelete))">
        </TableWithPagination>
    }
}
@code {
    TaxesFilter TaxesFilter = new();
    protected override async Task OnInitializedAsync()
    {
        HeaderService.ChangeHeaderAndTitle("Taxes");
        LoaderService.ToggleLoader();
        await GetTaxesFiltered();
        LoaderService.ToggleLoader();
    }
    private async Task GetTaxesFiltered() => TaxesFilter = await service.GetList(TaxesFilter);
    private async Task TableActions(Guid Id, bool IsDelete)
    {
        if (IsDelete)
        {
            if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this Tax?"))
            {
                var response = await service.Delete(Id);
                if (response.IsSuccessStatusCode)
                    TaxesFilter.Items.Remove(TaxesFilter.Items.First(c => c.TaxId == Id));
                await ShowResultMessage(response);
            }
        }
        else
        {
            await ShowModal(typeof(Tax), "Edit - Tax", new ModalParameters().Add(nameof(Tax.IsModal), true).Add(nameof(Tax.Id), Id), GetTaxesFiltered);
        }
    }
    private async Task SortBy(string Field)
    {
        TaxesFilter.SortField = Field;
        TaxesFilter.SortApproach = !TaxesFilter.SortApproach;
        await GetTaxesFiltered();
    }
}
