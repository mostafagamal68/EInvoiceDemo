@page "/Taxes"
@inherits GeneralComponent
@inject ITaxesService service

<div class="d-flex justify-content-end align-items-center mb-3">
    <a role="button" class="btn btn-violet rounded-3" @onclick="@(()=>ShowModal(typeof(Tax), "Add - Tax", afterClose: GetTaxesFiltered))">
        <i class="bi bi-plus-circle mx-1"></i>
        Add
    </a>
</div>
<div class="d-flex justify-content-start mb-3">
    <div>
        <label>Name</label>
        <input class="form-control" @bind="TaxesFilter.TaxName" @bind:event="oninput" @bind:after="GetTaxesFiltered" />
    </div>
</div>
@if (!LoaderService.IsLoading)
{
    @if (TaxesFilter?.Items.Count() == 0)
    {
        <div class="d-flex alert alert-warning align-Taxs-center">
            <h5><i class="bi bi-exclamation-triangle mx-2"></i>No Taxes</h5>
        </div>
    }
    else
    {
        <TableTemplate Items="TaxesFilter?.Items" Context="sub" class="table table-striped table-hover">
            <TableHeader>
                <th scope="col" class="border-end text-center" style="border-top-left-radius:20px">#</th>
                <th scope="col" class="border-end" style="cursor: pointer;" @onclick="@(async () => await SortBy("TaxCode"))">Code</th>
                <th scope="col" class="border-end" style="cursor: pointer;" @onclick="@(async () => await SortBy("TaxName"))">Name</th>
                <th scope="col" class="border-end" style="cursor: pointer;" @onclick="@(async () => await SortBy("TaxDescription"))">Description</th>
                <th class="text-end" style="border-top-right-radius:20px">Actions</th>
            </TableHeader>
            <RowTemplate>
                <td scope="row" class="border-end text-center" style=@(sub.Item2 == sub.Item3 ? "border-bottom-left-radius:20px" : "")>@sub.Item2</td>
                <td class="border-end">@sub.Item1.TaxCode</td>
                <td class="border-end">@sub.Item1.TaxName</td>
                <td class="border-end">@sub.Item1.TaxDescription</td>
                <td class="text-end" style=@(sub.Item2 == sub.Item3 ? "border-bottom-right-radius:20px" : "")>
                    <a role="button" class="btn btn-sm btn-warning rounded-3" type="button"
                    @onclick="@(() => ShowModal(typeof(Tax), "Edit - Tax", new ModalParameters().Add(nameof(Tax.IsModal), true).Add(nameof(Tax.Id), sub.Item1.TaxId), GetTaxesFiltered))">
                        <i class="bi bi-pencil-square"></i>
                    </a>
                    <a role="button" class="btn btn-sm btn-danger rounded-3" type="button" @onclick="@(() => DeleteRow(sub.Item1.TaxId))">
                        <i class="bi bi-trash"></i>
                    </a>
                </td>
            </RowTemplate>
        </TableTemplate>
    }

    <Paginator Pagination="TaxesFilter?.Pagination" GetPage="GetTaxesFiltered"></Paginator>
}
@code {
    TaxesFilter TaxesFilter = new();
    protected override async Task OnInitializedAsync()
    {
        HeaderService.ChangeHeaderAndTitle("Taxes");
        LoaderService.ToggleLoader();
        await GetTaxesFiltered();
        LoaderService.ToggleLoader();
    }
    private async Task GetTaxesFiltered() => TaxesFilter = await service.GetList(TaxesFilter);
    private async Task DeleteRow(Guid Id)
    {
        if (await ShowConfirm("Delete Confirmation", "Are you sure to delete this Tax?"))
        {
            var response = await service.Delete(Id);
            if (response.IsSuccessStatusCode)
                TaxesFilter.Items.Remove(TaxesFilter.Items.First(c => c.TaxId == Id));
            await ShowResultMessage(response);
        }
    }
    private async Task SortBy(string Field)
    {
        TaxesFilter.SortField = Field;
        TaxesFilter.SortApproach = !TaxesFilter.SortApproach;
        await GetTaxesFiltered();
    }

}
